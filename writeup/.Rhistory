###Data Preparation
####Load Relevant Libraries and Functions
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(readxl)
####Import data
pilot <- read_xlsx('C:/Users/crazy/OneDrive/Desktop/pilditch2019/Pilot_data_revised.xlsx')
#### Data exclusion / filtering
pilot_rows12_removed <- pilot[-c(1,2),] # remove additional rows from qualtrics file
filtered_pilot <- select(pilot_rows12_removed, +contains("Nitro"), +contains("Ster"), +contains("BT"), +contains("Crash")) #remove extra qualtrics columns
exp2_filtered <- select(filtered_pilot, -contains("rn")) #remove reasoning for choice
exp2_decision <- select(exp2_filtered, -contains("%")) # only decisions retained
exp2_decision_long <- gather(exp2_decision, result, na.rm = TRUE) #convert to tidy/long data format, remove NAs
exp2_decision_long_mod <- exp2_decision_long %>%
separate(result, into = c("Scenario", "Result_given", "Condition"), sep = "_" )
# group data by condition, find mean porportions of each condition
#Analysis 1
#### Prepare data for analysis - create columns etc.
View(exp2_decision_long_mod)
View(exp2_decision_long_mod)
?group_by()
?summarize
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise()
exp2_means
?replace
exp2_decision_long_mod <- exp2_decision_long_mod %>%
replace("ex", "exp")
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise()
exp2_means
exp2_decision_long_mod <- exp2_decision_long %>%
separate(result, into = c("Scenario", "Result_given", "Condition"), sep = "_" )
exp2_decision_long_mod <- exp2_decision_long_mod %>%
replace(Condition , "ex", "exp")
exp2_decision_long_mod <-
replace(exp2_decision_long_mod$Condition , "ex", "exp")
View(exp2_decision)
View(exp2_decision)
exp2_decision <- select(exp2_filtered, -contains("%")) # only decisions retained
exp2_decision_long <- gather(exp2_decision, result, na.rm = TRUE) #convert to tidy/long data format, remove NAs
exp2_decision_long_mod <- exp2_decision_long %>%
separate(result, into = c("Scenario", "Result_given", "Condition"), sep = "_" )
exp2_decision_long_mod <-
replace(exp2_decision_long_mod$Condition , "ex", "exp")
exp2_decision_long <- gather(exp2_decision, result, na.rm = TRUE) #convert to tidy/long data format, remove NAs
exp2_decision_long_mod <- exp2_decision_long %>%
separate(result, into = c("Scenario", "Result_given", "Condition"), sep = "_" )
exp2_decision_long_mod$Condition =
replace(exp2_decision_long_mod$Condition , "ex", "exp")
exp2_decision_long_mod$Condition =
replace(exp2_decision_long_mod$Condition, "ex", "exp")
View(exp2_decision_long_mod)
View(exp2_decision_long_mod)
exp2_decision_long_mod$Condition <-
replace(exp2_decision_long_mod$Condition, "ex", "exp")
exp2_decision_long_mod$Condition <-
replace(exp2_decision_long_mod$Condition, exp2_decision_long_mod$Condition == "ex", "exp")
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise
exp2_means
?summarise
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(count("Yes", "No", "Can't Tell"))
#Analysis 1
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(tally())
#Analysis 1
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(tally(value))
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(value)
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise("value")
exp2_means
library(tidyverse)
library(DT) # dependency
library(ggthemes) # dependency
library(wordbankr)
library(purrr)
library(shiny)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
sgf <- read_csv("data/stiller_scales_data.csv")
sgf
sgf %>%
summarise(correct = mean(correct),
n_observations = length(subid))
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(proportion_yes = count())
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(proportion_yes = count(exp2_decision_long_mod$value))
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(proportion_yes = count(exp2_decision_long_mod$value == "Yes"))
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(proportion_yes = count(exp2_decision_long_mod$value = "Yes"))
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(proportion_yes = count(exp2_decision_long_mod, 'value'))
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
count(exp2_decision_long_mod, 'value')
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
count('value')
exp2_means
exp2_decision_long_mod <- exp2_decision_long %>%
separate(result, into = c("Scenario", "Result_given", "Condition"), sep = "_" )
exp2_decision_long_mod$Condition <-
replace(exp2_decision_long_mod$Condition, exp2_decision_long_mod$Condition == "ex", "exp") #convert all "ex" nomenclature to "exp" nonmenclature for more descriptive variables, initial Qualtrics variables were character restricted
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
count('value')
exp2_means
exp2_decision_long_mod <- exp2_decision_long %>%
separate(result, into = c("Scenario", "Result_given", "Condition"), sep = "_" )
exp2_decision_long_mod$Condition <-
replace(exp2_decision_long_mod$Condition, exp2_decision_long_mod$Condition == "ex", "exp") #convert all "ex" nomenclature to "exp" nonmenclature for more descriptive variables, initial Qualtrics variables were character restricted
count(exp2_decision_long_mod, 'value')
count(exp2_decision_long_mod, 'value')
count(exp2_decision_long_mod, Result_given, Condition, value, 'count')
count(exp2_decision_long_mod, Result_given, Condition, value, name = 'count')
exp2_raw_counts <- count(exp2_decision_long_mod, Result_given, Condition, value, name = 'count')
View(exp2_raw_counts)
View(exp2_raw_counts)
exp2_raw_counts
exp2_proportions <- exp2_decision_long_mod %>%
group_by(Result_given, Condition)
exp2_proportions
exp2_decision_long_mod$Scenario <-
replace(exp2_decision_long_mod$Scenario, exp2_decision_long_mod$Scenario == "nitro", "Nitro")
exp2_proportions <- exp2_decision_long_mod %>%
group_by(Result_given, Condition)
exp2_proportions
exp2_raw_counts <- count(exp2_decision_long_mod, Result_given, Condition, value, name = 'count')
exp2_raw_counts
prop.table(exp2_raw_counts)
exp2_raw_counts <- count(exp2_decision_long_mod, Result_given, Condition, value, name = 'count')
exp2_raw_counts
prop.table(exp2_raw_counts, count)
table(exp2_raw_counts)
?table
table(exp2_raw_counts, Condition, Result_given, value)
table(exp2_raw_counts, Condition, Result_given, value)
#Analysis 1
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
length(value)
exp2_means <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
length('value')
xtab2 <- xtabs(~ Result_given +value +Condition, Scenario)
xtab2 <- xtabs(~ Result_given +value +Condition, exp2_decision_long_mod)
xtab2
xtab2 <- xtabs(~ Result_given +value +Condition + Scenario, exp2_decision_long_mod)
xtab2
View(exp2_raw_counts)
View(exp2_raw_counts)
View(exp2_raw_counts)
View(exp2_raw_counts)
pilot_1 <- read_xlsx('https://github.com/psych251/pilditch2019/blob/master/Pilot_data_revised.xlsx')
pilot_1 <- read_xlsx('http://github.com/psych251/pilditch2019/blob/master/Pilot_data_revised.xlsx')
pilot_1 <- read_xlsx('D:/Desktop/Psych_251/Pilot_data_revised.xlsx')
View(pilot_1)
View(pilot_1)
pilot_1 <- read.csv('https://github.com/psych251/pilditch2019/blob/master/Pilot_study.csv')
View(pilot_1)
pilot_1 <- read.csv('https://github.com/psych251/pilditch2019/blob/master/Pilot_study.csv', header = TRUE)
pilot_1 <- read_csv('https://github.com/psych251/pilditch2019/blob/master/Pilot_study.csv', header = TRUE)
pilot_1 <- read_csv('https://github.com/psych251/pilditch2019/blob/master/Pilot_study.csv')
View(pilot_1)
exp2_means_1 <- exp2_decision_long_mod %>%
group_by(Result_given, Condition) %>%
summarise(n = n())
View(exp2_means_1)
View(exp2_means_1)
View(exp2_proportions)
View(exp2_proportions)
View(exp2_means)
View(exp2_means)
View(exp2_means_1)
View(exp2_means_1)
View(exp2_raw_counts)
View(exp2_raw_counts)
exp2_means_1 <- exp2_decision_long_mod %>%
group_by(Result_given, Condition, value) %>%
summarise(n = n())
View(exp2_means_1)
ggplot(exp2_decision_long_mod) +
geom_bar(aes(x = value, y = ..prop.., group = 1)) +
facet_grid(Result_given ~ Condition)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(readxl)
ggplot(exp2_decision_long_mod) +
geom_bar(aes(x = value, y = ..prop.., group = 1)) +
facet_grid(Result_given ~ Condition)
ggplot(exp2_decision_long_mod) +
geom_bar(aes(x = value, y = ..prop.., group = 1)) +
facet_grid(Condition ~ Result_given)
ggplot(exp2_decision_long_mod) +
geom_bar(aes(x = value, y = ..prop.., group = 1)) +
scale_x_discrete(limits=c("Yes","No","Cannot Tell"))+
facet_grid(Condition ~ Result_given)
help('transform')
?factor
exp2_decision_long_mod1 <- exp2_decision_long_mod
ggplot(transform(exp2_decision_long_mod1, Result_given=factor(Result_given, levels = c("pos", "neg")))) +
geom_bar(aes(x = value, y = ..prop.., group = 1)) +
scale_x_discrete(limits=c("Yes","No","Cannot Tell"))+
facet_grid(Condition ~ Result_given)
exp2__decision_means <- exp2_proportions_by_subid %>%
group_by(Result_given, Condition, value) %>%
summarise(avg_prop = mean(prop), #store means
u_interval = mean(prop) + 1.96*sd(prop)/sqrt(length(prop)), #upper bound of 95% CI
l_interval = mean(prop) - 1.96*sd(prop)/sqrt(length(prop))) #lower bound of 95% CI
###Data Preparation
####Load Relevant Libraries and Functions
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(readxl)
library(BayesFactor) # For Bayes Factor ANOVA
####Import data
#pilot_1 <- read.csv('https://github.com/psych251/pilditch2019/blob/master/Pilot_study.csv') # currently imports into one column, as opposed to rows, used method below
pilot_1 <- read.csv('C:/Users/crazy/OneDrive/Desktop/pilditch2019/Copy 2 Replication_Pilditch, Fenton, and Lagnado_ Exp_2 - Copy - Copy_November 29, 2019_15.52.csv',  header=T, na.strings=c("","NA")) # currently imports into one column, as opposed to rows, used method below
pilot_rows12_removed <- pilot_1[-c(1,2),] # remove additional rows from qualtrics file
pilot_ids_added <- mutate(pilot_rows12_removed, "subid" = row_number() )# add subject id
filtered_pilot <- select(pilot_ids_added, subid, +contains("Nitro"), +contains("Ster"), +contains("BT"), +contains("Crash")) #remove extra qualtrics columns
exp2_filtered <- select(filtered_pilot, -contains("rn")) #remove reasoning for choice
exp2_decision <- select(exp2_filtered, -contains(".")) # only decisions retained
exp2_decision_long <- gather(exp2_decision, trial, value, Nitro_pos_ctrl: Crash_neg_ex, na.rm = TRUE) #convert to tidy/long data format, remove NAs
View(exp2_decision)
View(exp2_decision)
###Data Preparation
####Load Relevant Libraries and Functions
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(readxl)
library(BayesFactor) # For Bayes Factor ANOVA
####Import data
#pilot_1 <- read.csv('https://github.com/psych251/pilditch2019/blob/master/Pilot_study.csv') # currently imports into one column, as opposed to rows, used method below
pilot_1 <- read.csv('C:/Users/crazy/OneDrive/Desktop/pilditch2019/Copy 2 Replication_Pilditch, Fenton, and Lagnado_ Exp_2 - Copy - Copy_November 29, 2019_15.52.csv',  header=T, na.strings=c("","NA")) # currently imports into one column, as opposed to rows, used method below
#pilot <- read_xlsx('C:/Users/crazy/OneDrive/Desktop/pilditch2019/pilot_b_test_reformatted_survey_11_27.xlsx') #working on code to pull from github, however have been getting errors when the path is a github url.
#### Data exclusion / filtering
pilot_rows12_removed <- pilot_1[-c(1,2),] # remove additional rows from qualtrics file
pilot_ids_added <- mutate(pilot_rows12_removed, "subid" = row_number() )# add subject id
filtered_pilot <- select(pilot_ids_added, subid, +contains("Nitro"), +contains("Ster"), +contains("BT"), +contains("Crash")) #remove extra qualtrics columns
exp2_filtered <- select(filtered_pilot, -contains("rn")) #remove reasoning for choice
exp2_decision <- select(exp2_filtered, -contains(".")) # only decisions retained
exp2_decision_long <- gather(exp2_decision, trial, value, Nitro_pos_ctrl: Crash_neg_ex, na.rm = TRUE) #convert to tidy/long data format, remove NAs
exp2_decision_long_mod <- exp2_decision_long %>%
separate(trial, into = c("Scenario", "Result_given", "Condition"), sep = "_" ) #create varaibles for Scenario type, Result_give (pos/neg), and Condition (control/experimental)
exp2_decision_long_mod$Condition <-
replace(exp2_decision_long_mod$Condition, exp2_decision_long_mod$Condition == "ex", "exp") #convert all "ex" nomenclature to "exp" nonmenclature for more descriptive variables, initial Qualtrics variables were character restricted
exp2_decision_long_mod$Scenario <-
replace(exp2_decision_long_mod$Scenario, exp2_decision_long_mod$Scenario == "nitro", "Nitro") #convert all 'nitro' to 'Nitro'
#### Group data by condition, find mean porportions of each condition
exp2_condition  <- subset(exp2_decision_long_mod, select = -Scenario ) #remove scenario column
exp2_condition_united <- unite(exp2_condition, united_subid_result_condition, subid, Result_given, Condition, sep = "-" ) #unite subid, Result_given, and Conidition into a single column so funcation as.data.frame can be used
exp2_condition_united_table <- as.data.frame(table(exp2_condition_united)) #counts all options (Yes, No, Cannot Tell) even when value = 0.
exp2_condition_subid <- separate(exp2_condition_united_table, united_subid_result_condition, into = c("subid", "Result_given", "Condition" ), sep = "-") #re-seperate out conditions for use as facets
exp2_proportions_by_subid <- mutate(exp2_condition_subid, prop = Freq/4 ) # calculation of proprotions
exp2_confidence <- select(exp2_filtered, subid, contains(".")) # only confidence values retained from filtered dataset
exp2_confidence_long <- gather(exp2_confidence, trial, value, Nitro_pos_ctrl_._1: Crash_neg_ex_._1 ,na.rm = TRUE) #convert to tidy/long data format, remove NAs
exp2_decision_confidence_long <-mutate(exp2_decision_long, confidence = exp2_confidence_long$value) #add long confidence data to decision data
exp2_decision_confidence_long <- exp2_decision_confidence_long %>%
separate(trial, into = c("Scenario", "Result_given", "Condition"), sep = "_" ) #create varaibles for Scenario type, Result_give (pos/neg), and Condition (control/experimental)
exp2_decision_confidence_long$Condition <-
replace(exp2_decision_confidence_long$Condition, exp2_decision_confidence_long$Condition == "ex", "exp") #convert all "ex" nomenclature to "exp" nonmenclature for more descriptive variables, initial Qualtrics variables were character restricted
exp2_decision_confidence_long$Scenario <-
replace(exp2_decision_confidence_long$Scenario, exp2_decision_confidence_long$Scenario == "nitro", "Nitro") #convert all 'nitro' to 'Nitro'
exp2_decision_confidence_long$confidence <- as.numeric(exp2_decision_confidence_long$confidence) #convert confidence to numeric from character
exp2__decision_means <- exp2_proportions_by_subid %>%
group_by(Result_given, Condition, value) %>%
summarise(avg_prop = mean(prop), #store means
u_interval = mean(prop) + 1.96*sd(prop)/sqrt(length(prop)), #upper bound of 95% CI
l_interval = mean(prop) - 1.96*sd(prop)/sqrt(length(prop))) #lower bound of 95% CI
ggplot(exp2__decision_means) +  aes(value, avg_prop) + xlab("Response")+ ylab("Proportion") +
geom_col(aes(x = value, y = avg_prop)) +
geom_errorbar(aes (x = value, ymax = u_interval, ymin = l_interval))+
facet_grid(Result_given ~ Condition)
ggplot(exp2__decision_means) +  aes(value, avg_prop) + xlab("Response")+ ylab("Proportion") +
geom_col(aes(x = value, y = avg_prop)) +
geom_errorbar(aes (x = value, ymax = u_interval, ymin = l_interval))+
facet_grid(Condition ~ Result_given)
ggplot(transform(exp2__decision_means, Result_given=factor(Result_given, levels = c("pos", "neg")))) +  aes(value, avg_prop) + xlab("Response")+ ylab("Proportion") +
geom_col(aes(x = value, y = avg_prop)) +
geom_errorbar(aes (x = value, ymax = u_interval, ymin = l_interval))+
facet_grid(Condition ~ Result_give
ggplot(transform(exp2__decision_means, Result_given=factor(Result_given, levels = c("pos", "neg")))) +  aes(value, avg_prop) + xlab("Response")+ ylab("Proportion") +
ggplot(transform(exp2__decision_means, Result_given=factor(Result_given, levels = c("pos", "neg")))) +  aes(value, avg_prop) + xlab("Response")+ ylab("Proportion") +
geom_col(aes(x = value, y = avg_prop)) +
geom_errorbar(aes (x = value, ymax = u_interval, ymin = l_interval))+
facet_grid(Condition ~ Result_given)
ggplot(transform(exp2__decision_means, Result_given=factor(Result_given, levels = c("pos", "neg")))) +  aes(value, avg_prop) + xlab("Response")+ ylab("Proportion") +
geom_col(aes(x = value, y = avg_prop)) +
scale_x_discrete(limits=c("Yes","No","Cannot Tell")) +
geom_errorbar(aes (x = value, ymax = u_interval, ymin = l_interval))+
facet_grid(Condition ~ Result_given)
exp2_binary_result <- mutate(exp2_decision_long_mod, binary_result = ifelse(value == "Yes", 1, 0)) # convert answers to binary correct or incorrect
exp2_binary_cum_result_by_id <- group_by(exp2_binary_result, Result_given, Condition, subid) %>%  summarise (correct = sum(binary_result)) #calculate scores per subject
exp2_binary_summary_by_condition <- group_by(exp2_binary_cum_result_by_id, Result_given, Condition) %>%  summarise (mean_correct = mean(correct), sd_correct = sd(correct), n = length(correct)) # calculate mean, sd, and n
exp2_binary_summary_by_condition$`sd_correct`[is.nan(exp2_binary_summary_by_condition$`sd_correct`)] <- 0 # remove any Nan - only applicable in small samples
exp2_binary_cum_result_by_id$Condition = factor(exp2_binary_cum_result_by_id$Condition) #encode Condition as factor
exp2_binary_cum_result_by_id$Result_given = factor(exp2_binary_cum_result_by_id$Result_given) #encode Result_given as factor
exp2.aov <- anovaBF(correct ~ Condition*Result_given,  data = exp2_binary_cum_result_by_id)
exp2.aov
ggplot(exp2_decision_confidence_long, aes(x = value, y = confidence)) +
geom_boxplot() +
scale_x_discrete(limits=c("Yes","No","Cannot Tell")) +
facet_grid(Result_given ~ Condition)
ggplot(exp2_decision_confidence_long, aes(x = value, y = confidence)) +
geom_boxplot() +
scale_x_discrete(limits=c("Yes","No","Cannot Tell")) +
facet_grid(Condition ~ Result_given)
ggplot(transform(exp2_decision_confidence_long, Result_given=factor(Result_given, levels = c("pos", "neg"))) , aes(x = value, y = confidence)) +
geom_boxplot() +
scale_x_discrete(limits=c("Yes","No","Cannot Tell")) +
facet_grid(Condition ~ Result_given)
ggplot(transform(exp2_decision_confidence_long,
Result_given=factor(Result_given, levels = c("pos", "neg"))),
aes(x = value, y = confidence)) +
geom_boxplot() +
scale_x_discrete(limits=c("Yes","No","Cannot Tell")) +
facet_grid(Condition ~ Result_given)
